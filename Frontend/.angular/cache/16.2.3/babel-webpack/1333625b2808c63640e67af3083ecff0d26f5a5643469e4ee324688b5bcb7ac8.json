{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = 'http://localhost:4200/api/';\n    this.cartProducts = [];\n    this.productQuantity = new Map();\n    this.cartProductsPrice = 0;\n    this.itemsPrice = 0;\n    this.totalPrice = 0;\n    this.items = new Map();\n    this.createOrder = orderDetails => {\n      const url = `${this.baseURL}orders/create`;\n      return this.http.post(url, orderDetails);\n    };\n  }\n  save() {\n    // Save data to local storage\n    localStorage.setItem('productQuantity', JSON.stringify(Array.from(this.productQuantity.entries())));\n    localStorage.setItem('cartProducts', JSON.stringify(this.cartProducts));\n    localStorage.setItem('cartProductsPrice', this.cartProductsPrice.toString());\n    // localStorage.setItem('orderTotalPrice', this.orderTotalPrice.toString());\n  }\n\n  retrieve() {\n    // Retrieve data from local storage on component initialization\n    const storedProductQuantity = localStorage.getItem('productQuantity');\n    const storedCartProducts = localStorage.getItem('cartProducts');\n    const storedCartProductsPrice = localStorage.getItem('cartProductsPrice');\n    if (storedProductQuantity) {\n      this.productQuantity = new Map(JSON.parse(storedProductQuantity));\n    }\n    if (storedCartProducts) {\n      this.cartProducts = JSON.parse(storedCartProducts);\n    }\n    if (storedCartProductsPrice) {\n      this.cartProductsPrice = parseFloat(storedCartProductsPrice);\n    }\n  }\n  updateItemsPrice() {\n    for (let item of this.items.values()) {\n      this.itemsPrice = item.product.price * item.quantity;\n    }\n  }\n  updatePrice() {\n    this.totalPrice = this.itemsPrice + this.getShippingPrice();\n  }\n  deleteItem(id) {}\n  updateItem(product, qte) {}\n  addToCart(product, quantity) {\n    this.updateCartProducts(product);\n    this.productQuantity.set(product.id, (this.productQuantity.get(product.id) || 0) + quantity);\n    this.updateCartProductsPrice(product.price, quantity, true);\n    this.save();\n  }\n  updateCartProducts(product) {\n    if (!this.productQuantity.has(product.id)) {\n      this.cartProducts.push(product);\n    }\n    this.save();\n  }\n  deleteFromCart(product) {\n    this.updateCartProductsPrice(product.price, this.productQuantity.get(product.id), false);\n    this.productQuantity.delete(product.id);\n    const index = this.cartProducts.indexOf(product);\n    this.cartProducts.splice(index, 1);\n    this.save();\n  }\n  clearCart() {\n    this.productQuantity.clear();\n    this.cartProducts = [];\n    this.save();\n  }\n  updateCartProductsPrice(price, quantity, add) {\n    this.cartProductsPrice += price * quantity * (add ? 1 : -1);\n  }\n  getShippingPrices() {\n    return this.http.get('/assets/shipping.json');\n  }\n  getShippingPrice() {\n    return 10;\n  }\n  // getters\n  getProductQuantity() {\n    return this.productQuantity;\n  }\n  getCartProducts() {\n    return this.cartProducts;\n  }\n  getCartProdcutsPrice() {\n    return this.cartProductsPrice;\n  }\n}\n_class = CartService;\n_class.ɵfac = function CartService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["CartService","constructor","http","baseURL","cartProducts","productQuantity","Map","cartProductsPrice","itemsPrice","totalPrice","items","createOrder","orderDetails","url","post","save","localStorage","setItem","JSON","stringify","Array","from","entries","toString","retrieve","storedProductQuantity","getItem","storedCartProducts","storedCartProductsPrice","parse","parseFloat","updateItemsPrice","item","values","product","price","quantity","updatePrice","getShippingPrice","deleteItem","id","updateItem","qte","addToCart","updateCartProducts","set","get","updateCartProductsPrice","has","push","deleteFromCart","delete","index","indexOf","splice","clearCart","clear","add","getShippingPrices","getProductQuantity","getCartProducts","getCartProdcutsPrice","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Academique\\Coding\\Web Projects\\E-Commerce website\\Frontend\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Product, Item } from '../products';\nimport { Injectable } from '@angular/core';\nimport { promise } from 'protractor';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  baseURL = 'http://localhost:4200/api/';\n\n  cartProducts: Product[] = [];\n  productQuantity: Map<number, number> = new Map();\n  cartProductsPrice: number = 0;\n\n  itemsPrice: number = 0;\n  totalPrice: number = 0;\n  items: Map<number, Item> = new Map();\n\n\n  constructor(\n    private http: HttpClient\n  ) { }\n  save(): void {\n    // Save data to local storage\n    localStorage.setItem('productQuantity', JSON.stringify(Array.from(this.productQuantity.entries())));\n    localStorage.setItem('cartProducts', JSON.stringify(this.cartProducts));\n    localStorage.setItem('cartProductsPrice', this.cartProductsPrice.toString());\n    // localStorage.setItem('orderTotalPrice', this.orderTotalPrice.toString());\n  }\n    retrieve(): void {\n    // Retrieve data from local storage on component initialization\n    const storedProductQuantity = localStorage.getItem('productQuantity');\n    const storedCartProducts = localStorage.getItem('cartProducts');\n    const storedCartProductsPrice = localStorage.getItem('cartProductsPrice');\n\n    if (storedProductQuantity) {\n      this.productQuantity = new Map(JSON.parse(storedProductQuantity));\n    }\n    if (storedCartProducts) {\n      this.cartProducts = JSON.parse(storedCartProducts);\n    }\n    if (storedCartProductsPrice) {\n      this.cartProductsPrice = parseFloat(storedCartProductsPrice);\n    }\n  }\n\n  updateItemsPrice(){\n    for(let item of this.items.values()){\n      this.itemsPrice = item.product.price * item.quantity;\n    }\n  }\n\n  updatePrice(){\n    this.totalPrice = this.itemsPrice + this.getShippingPrice();\n  }\n\n  deleteItem(id: number){\n\n  }\n\n  updateItem(product: Product, qte: number){\n\n  }\n\n\n\n  addToCart(product: Product, quantity: number) {\n    this.updateCartProducts(product);\n    this.productQuantity.set(product.id, (this.productQuantity.get(product.id) || 0) + quantity);\n    this.updateCartProductsPrice(product.price, quantity, true);\n    this.save();\n  }\n\n  updateCartProducts(product: Product) {\n    if (!this.productQuantity.has(product.id)) {\n      this.cartProducts.push(product);\n    }\n    this.save();\n  }\n\n  deleteFromCart(product: Product) {\n    this.updateCartProductsPrice(product.price, this.productQuantity.get(product.id)!, false);\n    this.productQuantity.delete(product.id);\n    const index = this.cartProducts.indexOf(product);\n    this.cartProducts.splice(index, 1);\n    this.save();\n  }\n  \n  clearCart() {\n    this.productQuantity.clear();\n    this.cartProducts = []\n    this.save();\n  }\n\n  updateCartProductsPrice(price: number, quantity: number, add: boolean) {\n    this.cartProductsPrice += price * quantity * (add ? 1 : -1);\n  }\n\n  getShippingPrices() {\n    return this.http.get<{ type: string, price: number }[]>('/assets/shipping.json');\n  }\n\n  getShippingPrice(): number {\n    return 10;\n  }\n\n  createOrder = (orderDetails: any) => {\n    const url = `${this.baseURL}orders/create`;\n    return this.http.post(url, orderDetails);\n  }\n\n  // getters\n  getProductQuantity() {\n    return this.productQuantity;\n  }\n\n  getCartProducts() {\n    return this.cartProducts;\n  }\n\n  getCartProdcutsPrice() {\n    return this.cartProductsPrice;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}