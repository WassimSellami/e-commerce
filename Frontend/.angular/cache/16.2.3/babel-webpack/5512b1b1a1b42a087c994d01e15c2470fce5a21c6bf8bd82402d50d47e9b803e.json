{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = 'http://localhost:4200/api/';\n    this.cartProducts = [];\n    this.productQuantity = new Map();\n    this.cartProductsPrice = 0;\n    this.createOrder = orderDetails => {\n      const url = `${this.baseURL}orders/create`;\n      return this.http.post(url, orderDetails);\n    };\n  }\n  save() {\n    // Save data to local storage\n    localStorage.setItem('productQuantity', JSON.stringify(Array.from(this.productQuantity.entries())));\n    localStorage.setItem('cartProducts', JSON.stringify(this.cartProducts));\n    localStorage.setItem('cartProductsPrice', this.cartProductsPrice.toString());\n    // localStorage.setItem('orderTotalPrice', this.orderTotalPrice.toString());\n  }\n\n  retrieve() {\n    // Retrieve data from local storage on component initialization\n    const storedProductQuantity = localStorage.getItem('productQuantity');\n    const storedCartProducts = localStorage.getItem('cartProducts');\n    const storedCartProductsPrice = localStorage.getItem('cartProductsPrice');\n    // const storedOrderTotalPrice = localStorage.getItem('orderTotalPrice');\n    if (storedProductQuantity) {\n      this.productQuantity = new Map(JSON.parse(storedProductQuantity));\n    }\n    if (storedCartProducts) {\n      this.cartProducts = JSON.parse(storedCartProducts);\n    }\n    if (storedCartProductsPrice) {\n      this.cartProductsPrice = parseFloat(storedCartProductsPrice);\n    }\n    // if (storedOrderTotalPrice) {\n    //   this.orderTotalPrice = parseFloat(storedOrderTotalPrice);\n    // }\n    // Recalculate order total price\n    // this.calculateOrderTotalPrice();\n  }\n  // calculateOrderTotalPrice(): void {\n  //   this.orderTotalPrice = this.cartProductsPrice + this.shippingPrice;\n  // }\n  // @HostListener('window:beforeunload')\n  // unloadHandler(): void {\n  //   // Save data to local storage when the page is about to unload\n  //   this.onSaveToLocalStorage();\n  // }\n  addToCart(product, quantity) {\n    this.updateCartProducts(product);\n    this.productQuantity.set(product.id, (this.productQuantity.get(product.id) || 0) + quantity);\n    this.updateCartProductsPrice(product.price, quantity, true);\n    this.save();\n  }\n  updateCartProducts(product) {\n    if (!this.productQuantity.has(product.id)) {\n      this.cartProducts.push(product);\n    }\n    this.save();\n  }\n  deleteCartProduct(product) {\n    this.productQuantity.delete(product.id);\n    const index = this.cartProducts.indexOf(product);\n    this.cartProducts.splice(index, 1);\n    this.save();\n  }\n  clearCart() {\n    this.productQuantity.clear();\n    this.cartProducts = [];\n  }\n  updateCartProductsPrice(price, quantity, add) {\n    this.cartProductsPrice += price * quantity * (add ? 1 : -1);\n    console.log(this.cartProductsPrice);\n  }\n  getShippingPrices() {\n    return this.http.get('/assets/shipping.json');\n  }\n  getShippingPrice() {\n    return 10;\n  }\n  // getters\n  getProductQuantity() {\n    this.retrieve();\n    return this.productQuantity;\n  }\n  getCartProducts() {\n    return this.cartProducts;\n  }\n  getCartProdcutsPrice() {\n    return this.cartProductsPrice;\n  }\n}\n_class = CartService;\n_class.ɵfac = function CartService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["CartService","constructor","http","baseURL","cartProducts","productQuantity","Map","cartProductsPrice","createOrder","orderDetails","url","post","save","localStorage","setItem","JSON","stringify","Array","from","entries","toString","retrieve","storedProductQuantity","getItem","storedCartProducts","storedCartProductsPrice","parse","parseFloat","addToCart","product","quantity","updateCartProducts","set","id","get","updateCartProductsPrice","price","has","push","deleteCartProduct","delete","index","indexOf","splice","clearCart","clear","add","console","log","getShippingPrices","getShippingPrice","getProductQuantity","getCartProducts","getCartProdcutsPrice","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Academique\\Coding\\Web Projects\\E-Commerce website\\Frontend\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Product } from '../products';\nimport { Injectable } from '@angular/core';\nimport { promise } from 'protractor';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  baseURL = 'http://localhost:4200/api/';\n  cartProducts: Product[] = [];\n  productQuantity: Map<number, number> = new Map();\n  cartProductsPrice: number = 0;\n  constructor(\n    private http: HttpClient\n  ) { }\n  save(): void {\n    // Save data to local storage\n    localStorage.setItem('productQuantity', JSON.stringify(Array.from(this.productQuantity.entries())));\n    localStorage.setItem('cartProducts', JSON.stringify(this.cartProducts));\n    localStorage.setItem('cartProductsPrice', this.cartProductsPrice.toString());\n    // localStorage.setItem('orderTotalPrice', this.orderTotalPrice.toString());\n  }\n    retrieve(): void {\n    // Retrieve data from local storage on component initialization\n    const storedProductQuantity = localStorage.getItem('productQuantity');\n    const storedCartProducts = localStorage.getItem('cartProducts');\n    const storedCartProductsPrice = localStorage.getItem('cartProductsPrice');\n    // const storedOrderTotalPrice = localStorage.getItem('orderTotalPrice');\n\n    if (storedProductQuantity) {\n      this.productQuantity = new Map(JSON.parse(storedProductQuantity));\n    }\n\n    if (storedCartProducts) {\n      this.cartProducts = JSON.parse(storedCartProducts);\n    }\n\n    if (storedCartProductsPrice) {\n      this.cartProductsPrice = parseFloat(storedCartProductsPrice);\n    }\n\n    // if (storedOrderTotalPrice) {\n    //   this.orderTotalPrice = parseFloat(storedOrderTotalPrice);\n    // }\n\n    // Recalculate order total price\n    // this.calculateOrderTotalPrice();\n  }\n  // calculateOrderTotalPrice(): void {\n  //   this.orderTotalPrice = this.cartProductsPrice + this.shippingPrice;\n  // }\n  \n  // @HostListener('window:beforeunload')\n  // unloadHandler(): void {\n  //   // Save data to local storage when the page is about to unload\n  //   this.onSaveToLocalStorage();\n  // }\n\n  addToCart(product: Product, quantity: number) {\n    this.updateCartProducts(product);\n    this.productQuantity.set(product.id, (this.productQuantity.get(product.id) || 0) + quantity);\n    this.updateCartProductsPrice(product.price, quantity, true);\n    this.save();\n  }\n\n  updateCartProducts(product: Product) {\n    if (!this.productQuantity.has(product.id)) {\n      this.cartProducts.push(product);\n    }\n    this.save();\n  }\n\n  deleteCartProduct(product: Product) {\n    this.productQuantity.delete(product.id);\n    const index = this.cartProducts.indexOf(product);\n    this.cartProducts.splice(index, 1);\n    this.save();\n  }\n\n  clearCart() {\n    this.productQuantity.clear();\n    this.cartProducts = []\n  }\n\n  updateCartProductsPrice(price: number, quantity: number, add: boolean) {\n    this.cartProductsPrice += price * quantity * (add ? 1 : -1);\n    console.log(this.cartProductsPrice);\n  }\n\n  getShippingPrices() {\n    return this.http.get<{ type: string, price: number }[]>('/assets/shipping.json');\n  }\n\n  getShippingPrice(): number {\n    return 10;\n  }\n\n  createOrder = (orderDetails: any) => {\n    const url = `${this.baseURL}orders/create`;\n    return this.http.post(url, orderDetails);\n  }\n\n  // getters\n  getProductQuantity() {\n    this.retrieve();\n    return this.productQuantity;\n  }\n\n  getCartProducts() {\n    return this.cartProducts;\n  }\n\n  getCartProdcutsPrice() {\n    return this.cartProductsPrice;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}