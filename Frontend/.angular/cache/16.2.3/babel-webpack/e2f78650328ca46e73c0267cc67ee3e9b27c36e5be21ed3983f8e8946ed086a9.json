{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = 'http://localhost:4200/api/';\n    this.itemsPrice = 0;\n    this.totalPrice = 0;\n    this.items = new Map();\n    this.shippingPrice = 0;\n    this.createOrder = orderDetails => {\n      const url = `${this.baseURL}orders/create`;\n      return this.http.post(url, orderDetails);\n    };\n  }\n  save() {\n    // Save data to local storage\n    localStorage.setItem('productQuantity', JSON.stringify(Array.from(this.productQuantity.entries())));\n    localStorage.setItem('cartProducts', JSON.stringify(this.cartProducts));\n    localStorage.setItem('cartProductsPrice', this.cartProductsPrice.toString());\n  }\n  retrieve() {\n    // Retrieve data from local storage on component initialization\n    const storedItems = localStorage.getItem('items');\n    const storedTotalPrice = localStorage.getItem('totalPrice');\n    const storedItemsPrice = localStorage.getItem('itemsPrice');\n    if (storedItems) {\n      this.items = new Map(JSON.parse(storedItems));\n    }\n    if (storedTotalPrice) {\n      this.totalPrice = parseFloat(storedTotalPrice);\n    }\n    if (storedItemsPrice) {\n      this.itemsPrice = parseFloat(storedItemsPrice);\n    }\n  }\n  updateItemsPrice() {\n    for (let item of this.items.values()) {\n      this.itemsPrice = item.product.price * item.quantity;\n    }\n  }\n  updatePrice() {\n    this.updateItemsPrice();\n    this.totalPrice = this.itemsPrice + this.getShippingPrice();\n  }\n  deleteItem(id) {\n    this.productQuantity.delete(id);\n    this.updatePrice();\n    this.save();\n  }\n  updateItem(product, qte) {\n    if (this.items.has(product.id)) {\n      this.items.get(product.id).quantity += qte;\n    } else {\n      let item = {\n        product: product,\n        quantity: qte\n      };\n      this.items.set(product.id, item);\n    }\n    this.updatePrice();\n    this.save();\n  }\n  clearCart() {\n    this.items.clear();\n    this.itemsPrice = 0;\n    this.totalPrice = 0;\n    this.save();\n  }\n  getShippingPrices() {\n    return this.http.get('/assets/shipping.json');\n  }\n  getShippingPrice() {\n    return 10;\n  }\n}\n_class = CartService;\n_class.ɵfac = function CartService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["CartService","constructor","http","baseURL","itemsPrice","totalPrice","items","Map","shippingPrice","createOrder","orderDetails","url","post","save","localStorage","setItem","JSON","stringify","Array","from","productQuantity","entries","cartProducts","cartProductsPrice","toString","retrieve","storedItems","getItem","storedTotalPrice","storedItemsPrice","parse","parseFloat","updateItemsPrice","item","values","product","price","quantity","updatePrice","getShippingPrice","deleteItem","id","delete","updateItem","qte","has","get","set","clearCart","clear","getShippingPrices","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Academique\\Coding\\Web Projects\\E-Commerce website\\Frontend\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Product, Item } from '../products';\nimport { Injectable } from '@angular/core';\nimport { promise } from 'protractor';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  baseURL = 'http://localhost:4200/api/';\n\n  itemsPrice: number = 0;\n  totalPrice: number = 0;\n  items: Map<number, Item> = new Map();\n  shippingPrice: number = 0;\n\n\n  constructor(\n    private http: HttpClient\n  ) { }\n  save(): void {\n    // Save data to local storage\n    localStorage.setItem('productQuantity', JSON.stringify(Array.from(this.productQuantity.entries())));\n    localStorage.setItem('cartProducts', JSON.stringify(this.cartProducts));\n    localStorage.setItem('cartProductsPrice', this.cartProductsPrice.toString());\n  }\n  retrieve(): void {\n    // Retrieve data from local storage on component initialization\n    const storedItems = localStorage.getItem('items');\n    const storedTotalPrice = localStorage.getItem('totalPrice');\n    const storedItemsPrice = localStorage.getItem('itemsPrice');\n\n    if (storedItems) {\n      this.items = new Map(JSON.parse(storedItems));\n    }\n    if (storedTotalPrice) {\n      this.totalPrice = parseFloat(storedTotalPrice);\n    }\n    if (storedItemsPrice) {\n      this.itemsPrice = parseFloat(storedItemsPrice);\n    }\n  }\n\n  updateItemsPrice() {\n    for (let item of this.items.values()) {\n      this.itemsPrice = item.product.price * item.quantity;\n    }\n  }\n\n  updatePrice() {\n    this.updateItemsPrice()\n    this.totalPrice = this.itemsPrice + this.getShippingPrice();\n  }\n\n  deleteItem(id: number) {\n    this.productQuantity.delete(id);\n    this.updatePrice();\n    this.save();\n  }\n\n  updateItem(product: Product, qte: number) {\n    if (this.items.has(product.id)) {\n      this.items.get(product.id)!.quantity += qte;\n    }\n    else {\n      let item: Item = { product: product, quantity: qte };\n      this.items.set(product.id, item);\n    }\n    this.updatePrice();\n    this.save();\n  }\n\n  clearCart() {\n    this.items.clear();\n    this.itemsPrice = 0;\n    this.totalPrice = 0;\n    this.save();\n  }\n\n  getShippingPrices() {\n    return this.http.get<{ type: string, price: number }[]>('/assets/shipping.json');\n  }\n\n  getShippingPrice(): number {\n    return 10;\n  }\n\n  createOrder = (orderDetails: any) => {\n    const url = `${this.baseURL}orders/create`;\n    return this.http.post(url, orderDetails);\n  }\n}\n"],"mappings":";;;AAQA,OAAM,MAAOA,WAAW;EAStBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IATd,KAAAC,OAAO,GAAG,4BAA4B;IAEtC,KAAAC,UAAU,GAAW,CAAC;IACtB,KAAAC,UAAU,GAAW,CAAC;IACtB,KAAAC,KAAK,GAAsB,IAAIC,GAAG,EAAE;IACpC,KAAAC,aAAa,GAAW,CAAC;IAyEzB,KAAAC,WAAW,GAAIC,YAAiB,IAAI;MAClC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACR,OAAO,eAAe;MAC1C,OAAO,IAAI,CAACD,IAAI,CAACU,IAAI,CAACD,GAAG,EAAED,YAAY,CAAC;IAC1C,CAAC;EAvEG;EACJG,IAAIA,CAAA;IACF;IACAC,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAEC,IAAI,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACC,eAAe,CAACC,OAAO,EAAE,CAAC,CAAC,CAAC;IACnGP,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACK,YAAY,CAAC,CAAC;IACvER,YAAY,CAACC,OAAO,CAAC,mBAAmB,EAAE,IAAI,CAACQ,iBAAiB,CAACC,QAAQ,EAAE,CAAC;EAC9E;EACAC,QAAQA,CAAA;IACN;IACA,MAAMC,WAAW,GAAGZ,YAAY,CAACa,OAAO,CAAC,OAAO,CAAC;IACjD,MAAMC,gBAAgB,GAAGd,YAAY,CAACa,OAAO,CAAC,YAAY,CAAC;IAC3D,MAAME,gBAAgB,GAAGf,YAAY,CAACa,OAAO,CAAC,YAAY,CAAC;IAE3D,IAAID,WAAW,EAAE;MACf,IAAI,CAACpB,KAAK,GAAG,IAAIC,GAAG,CAACS,IAAI,CAACc,KAAK,CAACJ,WAAW,CAAC,CAAC;;IAE/C,IAAIE,gBAAgB,EAAE;MACpB,IAAI,CAACvB,UAAU,GAAG0B,UAAU,CAACH,gBAAgB,CAAC;;IAEhD,IAAIC,gBAAgB,EAAE;MACpB,IAAI,CAACzB,UAAU,GAAG2B,UAAU,CAACF,gBAAgB,CAAC;;EAElD;EAEAG,gBAAgBA,CAAA;IACd,KAAK,IAAIC,IAAI,IAAI,IAAI,CAAC3B,KAAK,CAAC4B,MAAM,EAAE,EAAE;MACpC,IAAI,CAAC9B,UAAU,GAAG6B,IAAI,CAACE,OAAO,CAACC,KAAK,GAAGH,IAAI,CAACI,QAAQ;;EAExD;EAEAC,WAAWA,CAAA;IACT,IAAI,CAACN,gBAAgB,EAAE;IACvB,IAAI,CAAC3B,UAAU,GAAG,IAAI,CAACD,UAAU,GAAG,IAAI,CAACmC,gBAAgB,EAAE;EAC7D;EAEAC,UAAUA,CAACC,EAAU;IACnB,IAAI,CAACrB,eAAe,CAACsB,MAAM,CAACD,EAAE,CAAC;IAC/B,IAAI,CAACH,WAAW,EAAE;IAClB,IAAI,CAACzB,IAAI,EAAE;EACb;EAEA8B,UAAUA,CAACR,OAAgB,EAAES,GAAW;IACtC,IAAI,IAAI,CAACtC,KAAK,CAACuC,GAAG,CAACV,OAAO,CAACM,EAAE,CAAC,EAAE;MAC9B,IAAI,CAACnC,KAAK,CAACwC,GAAG,CAACX,OAAO,CAACM,EAAE,CAAE,CAACJ,QAAQ,IAAIO,GAAG;KAC5C,MACI;MACH,IAAIX,IAAI,GAAS;QAAEE,OAAO,EAAEA,OAAO;QAAEE,QAAQ,EAAEO;MAAG,CAAE;MACpD,IAAI,CAACtC,KAAK,CAACyC,GAAG,CAACZ,OAAO,CAACM,EAAE,EAAER,IAAI,CAAC;;IAElC,IAAI,CAACK,WAAW,EAAE;IAClB,IAAI,CAACzB,IAAI,EAAE;EACb;EAEAmC,SAASA,CAAA;IACP,IAAI,CAAC1C,KAAK,CAAC2C,KAAK,EAAE;IAClB,IAAI,CAAC7C,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,UAAU,GAAG,CAAC;IACnB,IAAI,CAACQ,IAAI,EAAE;EACb;EAEAqC,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAAChD,IAAI,CAAC4C,GAAG,CAAoC,uBAAuB,CAAC;EAClF;EAEAP,gBAAgBA,CAAA;IACd,OAAO,EAAE;EACX;;SA7EWvC,WAAW;;mBAAXA,MAAW,EAAAmD,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXtD,MAAW;EAAAuD,OAAA,EAAXvD,MAAW,CAAAwD,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}