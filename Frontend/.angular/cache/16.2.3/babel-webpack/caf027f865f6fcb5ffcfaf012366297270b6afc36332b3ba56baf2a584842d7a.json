{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = 'http://localhost:4200/api/';\n    this.itemsPrice = 0;\n    this.totalPrice = 0;\n    this.items = new Map();\n    this.shippingPrice = 10;\n    this.createOrder = orderDetails => {\n      const url = `${this.baseURL}orders`;\n      return this.http.post(url, orderDetails);\n    };\n    this.updateStockQuantities = leftQuantities => {\n      const url = `${this.baseURL}products/quantity`;\n      return this.http.patch(url, {\n        \"leftQuantities\": leftQuantities\n      });\n    };\n  }\n  save() {\n    // Save data to local storage\n    localStorage.setItem('items', JSON.stringify(Array.from(this.items.entries())));\n    localStorage.setItem('itemsPrice', this.itemsPrice.toString());\n    localStorage.setItem('totalPrice', this.totalPrice.toString());\n  }\n  retrieve() {\n    // Retrieve data from local storage on component initialization\n    const storedItems = localStorage.getItem('items');\n    const storedTotalPrice = localStorage.getItem('totalPrice');\n    const storedItemsPrice = localStorage.getItem('itemsPrice');\n    if (storedItems) {\n      this.items = new Map(JSON.parse(storedItems));\n    }\n    if (storedTotalPrice) {\n      this.totalPrice = parseFloat(storedTotalPrice);\n    }\n    if (storedItemsPrice) {\n      this.itemsPrice = parseFloat(storedItemsPrice);\n    }\n  }\n  updateItemsPrice() {\n    this.itemsPrice = 0;\n    for (let item of this.items.values()) {\n      this.itemsPrice += item.product.price * item.quantity;\n    }\n  }\n  updatePrice() {\n    this.updateItemsPrice();\n    this.totalPrice = this.itemsPrice + this.shippingPrice;\n  }\n  deleteItem(id) {\n    this.items.delete(id);\n    this.updatePrice();\n    this.save();\n  }\n  updateItem(product, qte) {\n    if (this.items.has(product.id)) {\n      this.items.get(product.id).quantity += qte;\n    } else {\n      let item = {\n        product: product,\n        quantity: qte\n      };\n      this.items.set(product.id, item);\n    }\n    this.updatePrice();\n    this.save();\n  }\n  clearCart() {\n    this.items.clear();\n    this.itemsPrice = 0;\n    this.totalPrice = 0;\n    this.save();\n  }\n  getShippingPrices() {\n    return this.http.get('/assets/shipping.json');\n  }\n}\n_class = CartService;\n_class.ɵfac = function CartService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["CartService","constructor","http","baseURL","itemsPrice","totalPrice","items","Map","shippingPrice","createOrder","orderDetails","url","post","updateStockQuantities","leftQuantities","patch","save","localStorage","setItem","JSON","stringify","Array","from","entries","toString","retrieve","storedItems","getItem","storedTotalPrice","storedItemsPrice","parse","parseFloat","updateItemsPrice","item","values","product","price","quantity","updatePrice","deleteItem","id","delete","updateItem","qte","has","get","set","clearCart","clear","getShippingPrices","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Academique\\Coding\\Web Projects\\E-Commerce website\\Frontend\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Product, Item } from '../models/products';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  baseURL = 'http://localhost:4200/api/';\n\n  itemsPrice: number = 0;\n  totalPrice: number = 0;\n  items: Map<number, Item> = new Map();\n  shippingPrice: number = 10;\n\n\n  constructor(\n    private http: HttpClient\n  ) { }\n  save(): void {\n    // Save data to local storage\n    localStorage.setItem('items', JSON.stringify(Array.from(this.items.entries())));\n    localStorage.setItem('itemsPrice', this.itemsPrice.toString());\n    localStorage.setItem('totalPrice', this.totalPrice.toString());\n  }\n  retrieve(): void {\n    // Retrieve data from local storage on component initialization\n    const storedItems = localStorage.getItem('items');\n    const storedTotalPrice = localStorage.getItem('totalPrice');\n    const storedItemsPrice = localStorage.getItem('itemsPrice');\n\n    if (storedItems) {\n      this.items = new Map(JSON.parse(storedItems));\n    }\n    if (storedTotalPrice) {\n      this.totalPrice = parseFloat(storedTotalPrice);\n    }\n    if (storedItemsPrice) {\n      this.itemsPrice = parseFloat(storedItemsPrice);\n    }\n  }\n\n  updateItemsPrice() {\n    this.itemsPrice = 0;\n    for (let item of this.items.values()) {\n      this.itemsPrice += item.product.price * item.quantity;\n    }\n  }\n\n  updatePrice() {\n    this.updateItemsPrice()\n    this.totalPrice = this.itemsPrice + this.shippingPrice;\n  }\n\n  deleteItem(id: number) {\n    this.items.delete(id);\n    this.updatePrice();\n    this.save();\n  }\n\n  updateItem(product: Product, qte: number) {\n    if (this.items.has(product.id)) {\n      this.items.get(product.id)!.quantity += qte;\n    }\n    else {\n      let item: Item = { product: product, quantity: qte };\n      this.items.set(product.id, item);\n    }\n    this.updatePrice();\n    this.save();\n  }\n\n  clearCart() {\n    this.items.clear();\n    this.itemsPrice = 0;\n    this.totalPrice = 0;\n    this.save();\n  }\n\n  getShippingPrices() {\n    return this.http.get<{ type: string, price: number }[]>('/assets/shipping.json');\n  }\n\n  createOrder = (orderDetails: any) => {\n    const url = `${this.baseURL}orders`;\n    return this.http.post(url, orderDetails);\n  }\n\n  updateStockQuantities = (leftQuantities: { id: number; newQuantity: number; }[]) => {\n    const url = `${this.baseURL}products/quantity`;\n    return this.http.patch(url, { \"leftQuantities\": leftQuantities });\n  }\n}\n"],"mappings":";;;AAOA,OAAM,MAAOA,WAAW;EAStBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IATd,KAAAC,OAAO,GAAG,4BAA4B;IAEtC,KAAAC,UAAU,GAAW,CAAC;IACtB,KAAAC,UAAU,GAAW,CAAC;IACtB,KAAAC,KAAK,GAAsB,IAAIC,GAAG,EAAE;IACpC,KAAAC,aAAa,GAAW,EAAE;IAsE1B,KAAAC,WAAW,GAAIC,YAAiB,IAAI;MAClC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACR,OAAO,QAAQ;MACnC,OAAO,IAAI,CAACD,IAAI,CAACU,IAAI,CAACD,GAAG,EAAED,YAAY,CAAC;IAC1C,CAAC;IAED,KAAAG,qBAAqB,GAAIC,cAAsD,IAAI;MACjF,MAAMH,GAAG,GAAG,GAAG,IAAI,CAACR,OAAO,mBAAmB;MAC9C,OAAO,IAAI,CAACD,IAAI,CAACa,KAAK,CAACJ,GAAG,EAAE;QAAE,gBAAgB,EAAEG;MAAc,CAAE,CAAC;IACnE,CAAC;EAzEG;EACJE,IAAIA,CAAA;IACF;IACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAChB,KAAK,CAACiB,OAAO,EAAE,CAAC,CAAC,CAAC;IAC/EN,YAAY,CAACC,OAAO,CAAC,YAAY,EAAE,IAAI,CAACd,UAAU,CAACoB,QAAQ,EAAE,CAAC;IAC9DP,YAAY,CAACC,OAAO,CAAC,YAAY,EAAE,IAAI,CAACb,UAAU,CAACmB,QAAQ,EAAE,CAAC;EAChE;EACAC,QAAQA,CAAA;IACN;IACA,MAAMC,WAAW,GAAGT,YAAY,CAACU,OAAO,CAAC,OAAO,CAAC;IACjD,MAAMC,gBAAgB,GAAGX,YAAY,CAACU,OAAO,CAAC,YAAY,CAAC;IAC3D,MAAME,gBAAgB,GAAGZ,YAAY,CAACU,OAAO,CAAC,YAAY,CAAC;IAE3D,IAAID,WAAW,EAAE;MACf,IAAI,CAACpB,KAAK,GAAG,IAAIC,GAAG,CAACY,IAAI,CAACW,KAAK,CAACJ,WAAW,CAAC,CAAC;;IAE/C,IAAIE,gBAAgB,EAAE;MACpB,IAAI,CAACvB,UAAU,GAAG0B,UAAU,CAACH,gBAAgB,CAAC;;IAEhD,IAAIC,gBAAgB,EAAE;MACpB,IAAI,CAACzB,UAAU,GAAG2B,UAAU,CAACF,gBAAgB,CAAC;;EAElD;EAEAG,gBAAgBA,CAAA;IACd,IAAI,CAAC5B,UAAU,GAAG,CAAC;IACnB,KAAK,IAAI6B,IAAI,IAAI,IAAI,CAAC3B,KAAK,CAAC4B,MAAM,EAAE,EAAE;MACpC,IAAI,CAAC9B,UAAU,IAAI6B,IAAI,CAACE,OAAO,CAACC,KAAK,GAAGH,IAAI,CAACI,QAAQ;;EAEzD;EAEAC,WAAWA,CAAA;IACT,IAAI,CAACN,gBAAgB,EAAE;IACvB,IAAI,CAAC3B,UAAU,GAAG,IAAI,CAACD,UAAU,GAAG,IAAI,CAACI,aAAa;EACxD;EAEA+B,UAAUA,CAACC,EAAU;IACnB,IAAI,CAAClC,KAAK,CAACmC,MAAM,CAACD,EAAE,CAAC;IACrB,IAAI,CAACF,WAAW,EAAE;IAClB,IAAI,CAACtB,IAAI,EAAE;EACb;EAEA0B,UAAUA,CAACP,OAAgB,EAAEQ,GAAW;IACtC,IAAI,IAAI,CAACrC,KAAK,CAACsC,GAAG,CAACT,OAAO,CAACK,EAAE,CAAC,EAAE;MAC9B,IAAI,CAAClC,KAAK,CAACuC,GAAG,CAACV,OAAO,CAACK,EAAE,CAAE,CAACH,QAAQ,IAAIM,GAAG;KAC5C,MACI;MACH,IAAIV,IAAI,GAAS;QAAEE,OAAO,EAAEA,OAAO;QAAEE,QAAQ,EAAEM;MAAG,CAAE;MACpD,IAAI,CAACrC,KAAK,CAACwC,GAAG,CAACX,OAAO,CAACK,EAAE,EAAEP,IAAI,CAAC;;IAElC,IAAI,CAACK,WAAW,EAAE;IAClB,IAAI,CAACtB,IAAI,EAAE;EACb;EAEA+B,SAASA,CAAA;IACP,IAAI,CAACzC,KAAK,CAAC0C,KAAK,EAAE;IAClB,IAAI,CAAC5C,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,UAAU,GAAG,CAAC;IACnB,IAAI,CAACW,IAAI,EAAE;EACb;EAEAiC,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAAC/C,IAAI,CAAC2C,GAAG,CAAoC,uBAAuB,CAAC;EAClF;;SA1EW7C,WAAW;;mBAAXA,MAAW,EAAAkD,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXrD,MAAW;EAAAsD,OAAA,EAAXtD,MAAW,CAAAuD,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}