{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.baseURL = 'http://localhost:4200/api/';\n    this.itemsPrice = 0;\n    this.totalPrice = 0;\n    this.items = new Map();\n    this.shippingPrice = 10;\n    this.createOrder = orderDetails => {\n      const url = `${this.baseURL}orders/create`;\n      return this.http.post(url, orderDetails);\n    };\n    this.updateQuantityInStock = leftQuantitits => {\n      leftQuantitits.map(item => {\n        const url = `${this.baseURL}products/updateQuantity?id=${item.id}`;\n        const newQuantity = item.quantity;\n        this.http.post(url, newQuantity);\n      });\n    };\n  }\n  save() {\n    // Save data to local storage\n    localStorage.setItem('items', JSON.stringify(Array.from(this.items.entries())));\n    localStorage.setItem('itemsPrice', this.itemsPrice.toString());\n    localStorage.setItem('totalPrice', this.totalPrice.toString());\n  }\n  retrieve() {\n    // Retrieve data from local storage on component initialization\n    const storedItems = localStorage.getItem('items');\n    const storedTotalPrice = localStorage.getItem('totalPrice');\n    const storedItemsPrice = localStorage.getItem('itemsPrice');\n    if (storedItems) {\n      this.items = new Map(JSON.parse(storedItems));\n    }\n    if (storedTotalPrice) {\n      this.totalPrice = parseFloat(storedTotalPrice);\n    }\n    if (storedItemsPrice) {\n      this.itemsPrice = parseFloat(storedItemsPrice);\n    }\n  }\n  updateItemsPrice() {\n    this.itemsPrice = 0;\n    for (let item of this.items.values()) {\n      this.itemsPrice += item.product.price * item.quantity;\n    }\n  }\n  updatePrice() {\n    this.updateItemsPrice();\n    this.totalPrice = this.itemsPrice + this.shippingPrice;\n  }\n  deleteItem(id) {\n    this.items.delete(id);\n    this.updatePrice();\n    this.save();\n  }\n  updateItem(product, qte) {\n    if (this.items.has(product.id)) {\n      this.items.get(product.id).quantity += qte;\n    } else {\n      let item = {\n        product: product,\n        quantity: qte\n      };\n      this.items.set(product.id, item);\n    }\n    this.updatePrice();\n    this.save();\n  }\n  clearCart() {\n    this.items.clear();\n    this.itemsPrice = 0;\n    this.totalPrice = 0;\n    this.save();\n  }\n  getShippingPrices() {\n    return this.http.get('/assets/shipping.json');\n  }\n}\n_class = CartService;\n_class.ɵfac = function CartService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["CartService","constructor","http","baseURL","itemsPrice","totalPrice","items","Map","shippingPrice","createOrder","orderDetails","url","post","updateQuantityInStock","leftQuantitits","map","item","id","newQuantity","quantity","save","localStorage","setItem","JSON","stringify","Array","from","entries","toString","retrieve","storedItems","getItem","storedTotalPrice","storedItemsPrice","parse","parseFloat","updateItemsPrice","values","product","price","updatePrice","deleteItem","delete","updateItem","qte","has","get","set","clearCart","clear","getShippingPrices","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Academique\\Coding\\Web Projects\\E-Commerce website\\Frontend\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Product, Item } from '../products';\nimport { Injectable } from '@angular/core';\nimport { promise } from 'protractor';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  baseURL = 'http://localhost:4200/api/';\n\n  itemsPrice: number = 0;\n  totalPrice: number = 0;\n  items: Map<number, Item> = new Map();\n  shippingPrice: number = 10;\n\n\n  constructor(\n    private http: HttpClient\n  ) { }\n  save(): void {\n    // Save data to local storage\n    localStorage.setItem('items', JSON.stringify(Array.from(this.items.entries())));\n    localStorage.setItem('itemsPrice', this.itemsPrice.toString());\n    localStorage.setItem('totalPrice', this.totalPrice.toString());\n  }\n  retrieve(): void {\n    // Retrieve data from local storage on component initialization\n    const storedItems = localStorage.getItem('items');\n    const storedTotalPrice = localStorage.getItem('totalPrice');\n    const storedItemsPrice = localStorage.getItem('itemsPrice');\n\n    if (storedItems) {\n      this.items = new Map(JSON.parse(storedItems));\n    }\n    if (storedTotalPrice) {\n      this.totalPrice = parseFloat(storedTotalPrice);\n    }\n    if (storedItemsPrice) {\n      this.itemsPrice = parseFloat(storedItemsPrice);\n    }\n  }\n\n  updateItemsPrice() {\n    this.itemsPrice = 0;\n    for (let item of this.items.values()) {\n      this.itemsPrice += item.product.price * item.quantity;\n    }\n  }\n\n  updatePrice() {\n    this.updateItemsPrice()\n    this.totalPrice = this.itemsPrice + this.shippingPrice;\n  }\n\n  deleteItem(id: number) {\n    this.items.delete(id);\n    this.updatePrice();\n    this.save();\n  }\n\n  updateItem(product: Product, qte: number) {\n    if (this.items.has(product.id)) {\n      this.items.get(product.id)!.quantity += qte;\n    }\n    else {\n      let item: Item = { product: product, quantity: qte };\n      this.items.set(product.id, item);\n    }\n    this.updatePrice();\n    this.save();\n  }\n\n  clearCart() {\n    this.items.clear();\n    this.itemsPrice = 0;\n    this.totalPrice = 0;\n    this.save();\n  }\n\n  getShippingPrices() {\n    return this.http.get<{ type: string, price: number }[]>('/assets/shipping.json');\n  }\n\n  createOrder = (orderDetails: any) => {\n    const url = `${this.baseURL}orders/create`;\n    return this.http.post(url, orderDetails);\n  }\n\n  updateQuantityInStock = (leftQuantitits: { id: number; quantity: number; }[]) => {\n    leftQuantitits.map(item => {\n      const url = `${this.baseURL}products/updateQuantity?id=${item.id}`;\n      const newQuantity = item.quantity;\n      this.http.post(url, newQuantity);\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}